#pragma kernel Transfer

int MaxPoints;
float3 ABBoxMin;
float3 ABBoxMax;

uint BufferSize0;
uint2 MapDimensions0;
StructuredBuffer<uint> ColorBuffer0;
StructuredBuffer<float> PositionBuffer0;
StructuredBuffer<float> RemapBuffer0;
StructuredBuffer<uint> ConfidenceBuffer0;
bool UseConfidenceBuffer0;
float4 Rotation0;
float3 PreTranslation0;
float3 PostTranslation0;
float4 CalibrationRotation0;
float3 CalibrationTranslation0;
float3 PointThresholdMin0;
float3 PointThresholdMax0;

uint BufferSize1;
uint2 MapDimensions1;
StructuredBuffer<uint> ColorBuffer1;
StructuredBuffer<float> PositionBuffer1;
StructuredBuffer<float> RemapBuffer1;
StructuredBuffer<uint> ConfidenceBuffer1;
bool UseConfidenceBuffer1;
float4 Rotation1;
float3 PreTranslation1;
float3 PostTranslation1;
float4 CalibrationRotation1;
float3 CalibrationTranslation1;
float3 PointThresholdMin1;
float3 PointThresholdMax1;

uint BufferSize2;
uint2 MapDimensions2;
StructuredBuffer<uint> ColorBuffer2;
StructuredBuffer<float> PositionBuffer2;
StructuredBuffer<float> RemapBuffer2;
StructuredBuffer<uint> ConfidenceBuffer2;
bool UseConfidenceBuffer2;
float4 Rotation2;
float3 PreTranslation2;
float3 PostTranslation2;
float4 CalibrationRotation2;
float3 CalibrationTranslation2;
float3 PointThresholdMin2;
float3 PointThresholdMax2;

uint BufferSize3;
uint2 MapDimensions3;
StructuredBuffer<uint> ColorBuffer3;
StructuredBuffer<float> PositionBuffer3;
StructuredBuffer<float> RemapBuffer3;
StructuredBuffer<uint> ConfidenceBuffer3;
bool UseConfidenceBuffer3;
float4 Rotation3;
float3 PreTranslation3;
float3 PostTranslation3;
float4 CalibrationRotation3;
float3 CalibrationTranslation3;
float3 PointThresholdMin3;
float3 PointThresholdMax3;

RWStructuredBuffer<float3> OutputBuffer;

// Copy-pasted from UnityCG.cginc
inline half3 GammaToLinearSpace (half3 sRGB)
{
    return sRGB * (sRGB * (sRGB * 0.305306011h + 0.682171111h) + 0.012522878h);
}

[numthreads(64, 1, 1)]
void Transfer(uint id : SV_DispatchThreadID)
{
    float3 pos;
    uint rawColor;
    float4 rotation;
    float3 preTranslation, postTranslation;
    float3 pointThresholdMin, pointThresholdMax;
    float4 calibrationRotation;
    float3 calibrationTranslation;

    if (id < BufferSize0)
    {
        pos = float3(
            PositionBuffer0[id * 3],
            -PositionBuffer0[id * 3 + 1],
            PositionBuffer0[id * 3 + 2]
        );
        rotation = Rotation0;
        preTranslation = PreTranslation0;
        postTranslation = PostTranslation0;
        pointThresholdMin = PointThresholdMin0;
        pointThresholdMax = PointThresholdMax0;
        calibrationRotation = CalibrationRotation0;
        calibrationTranslation = CalibrationTranslation0;
        float2 uv = float2(RemapBuffer0[id * 2], RemapBuffer0[id * 2 + 1]);
        uint2 idc = uv * MapDimensions0;
        rawColor = ColorBuffer0[idc.x + idc.y * MapDimensions0.x];
        if (UseConfidenceBuffer0)
        {
            int confidenceIndex = id / 4;
            int confidenceByte = id % 4;
            uint sequence = ConfidenceBuffer0[confidenceIndex];
            uint chars[4] =
            {
                sequence >> 24,
                (sequence & 0x00ff0000) >> 16,
                (sequence & 0x0000ff00) >> 8,
                (sequence & 0x000000ff)
            };
            if (chars[confidenceByte] == 0x0)
            {
                rawColor = 0x00000000;
                pos = float3(0, 0, 0);
            }
        }
    }
    else if (id < BufferSize1)
    {
        uint id1 = id - BufferSize0;
        pos = float3(
            PositionBuffer1[id1 * 3],
            -PositionBuffer1[id1 * 3 + 1],
            PositionBuffer1[id1 * 3 + 2]
        );
        rotation = Rotation1;
        preTranslation = PreTranslation1;
        postTranslation = PostTranslation1;
        pointThresholdMin = PointThresholdMin1;
        pointThresholdMax = PointThresholdMax1;
        calibrationRotation = CalibrationRotation1;
        calibrationTranslation = CalibrationTranslation1;
        float2 uv = float2(RemapBuffer1[id1 * 2], RemapBuffer1[id1 * 2 + 1]);
        uint2 id1c = uv * MapDimensions1;
        rawColor = ColorBuffer1[id1c.x + id1c.y * MapDimensions1.x];
        if (UseConfidenceBuffer1)
        {
            int confidenceIndex = id / 4;
            int confidenceByte = id % 4;
            uint sequence = ConfidenceBuffer1[confidenceIndex];
            uint chars[4] =
            {
                sequence >> 24,
                (sequence & 0x00ff0000) >> 16,
                (sequence & 0x0000ff00) >> 8,
                (sequence & 0x000000ff)
            };
            if (chars[confidenceByte] == 0x0)
            {
                rawColor = 0x00000000;
                pos = float3(0, 0, 0);
            }
        }
    }
    else if (id < BufferSize2)
    {
        uint id2 = id - BufferSize1;
        pos = float3(
            PositionBuffer2[id2 * 3],
            -PositionBuffer2[id2 * 3 + 1],
            PositionBuffer2[id2 * 3 + 2]
        );
        rotation = Rotation2;
        preTranslation = PreTranslation2;
        postTranslation = PostTranslation2;
        pointThresholdMin = PointThresholdMin2;
        pointThresholdMax = PointThresholdMax2;
        calibrationRotation = CalibrationRotation2;
        calibrationTranslation = CalibrationTranslation2;
        float2 uv = float2(RemapBuffer2[id2 * 2], RemapBuffer2[id2 * 2 + 1]);
        uint2 id2c = uv * MapDimensions2;
        rawColor = ColorBuffer2[id2c.x + id2c.y * MapDimensions2.x];
        if (UseConfidenceBuffer2)
        {
            int confidenceIndex = id / 4;
            int confidenceByte = id % 4;
            uint sequence = ConfidenceBuffer2[confidenceIndex];
            uint chars[4] =
            {
                sequence >> 24,
                (sequence & 0x00ff0000) >> 16,
                (sequence & 0x0000ff00) >> 8,
                (sequence & 0x000000ff)
            };
            if (chars[confidenceByte] == 0x0)
            {
                rawColor = 0x00000000;
                pos = float3(0, 0, 0);
            }
        }
    }
    else if (id < BufferSize3)
    {
        uint id3 = id - BufferSize2;
        pos = float3(
            PositionBuffer3[id3 * 3],
            -PositionBuffer3[id3 * 3 + 1],
            PositionBuffer3[id3 * 3 + 2]
        );
        rotation = Rotation3;
        preTranslation = PreTranslation3;
        postTranslation = PostTranslation3;
        pointThresholdMin = PointThresholdMin3;
        pointThresholdMax = PointThresholdMax3;
        calibrationRotation = CalibrationRotation3;
        calibrationTranslation = CalibrationTranslation3;
        float2 uv = float2(RemapBuffer3[id3 * 2], RemapBuffer3[id3 * 2 + 1]);
        uint2 id3c = uv * MapDimensions3;
        rawColor = ColorBuffer3[id3c.x + id3c.y * MapDimensions3.x];
        if (UseConfidenceBuffer3)
        {
            int confidenceIndex = id / 4;
            int confidenceByte = id % 4;
            uint sequence = ConfidenceBuffer3[confidenceIndex];
            uint chars[4] =
            {
                sequence >> 24,
                (sequence & 0x00ff0000) >> 16,
                (sequence & 0x0000ff00) >> 8,
                (sequence & 0x000000ff)
            };
            if (chars[confidenceByte] == 0x0)
            {
                rawColor = 0x00000000;
                pos = float3(0, 0, 0);
            }
        }
    }
    else
    {
        pos = float3(0, 0, 0);
        rotation = float4(0, 0, 0, 0);
        preTranslation = float3(0, 0, 0);
        postTranslation = float3(0, 0, 0);
        rawColor = 0x00000000;
    }

    // TODO this is happening in the wrong order or something
    // transform points
    pos = pos + calibrationTranslation;
    pos = pos + 2.0 * cross(cross(pos, calibrationRotation.xyz) + calibrationRotation.w * pos, calibrationRotation.xyz);

    // discard points out of individual camera thresholds
    uint insideX = step(pointThresholdMin.x, pos.x) * step(pos.x, pointThresholdMax.x);
    uint insideY = step(pointThresholdMin.y, pos.y) * step(pos.y, pointThresholdMax.y);
    uint insideZ = step(pointThresholdMin.z, pos.z) * step(pos.z, pointThresholdMax.z);
    uint insideThreshold = insideX * insideY * insideZ;

    pos = pos * insideThreshold;
    rawColor = rawColor * insideThreshold;

    pos = pos + preTranslation;
    pos = pos + 2.0 * cross(cross(pos, rotation.xyz) + rotation.w * pos, rotation.xyz);
    pos = pos + postTranslation;

    // discard points outside of the ABBox cutoff area
    uint inABX = step(ABBoxMin.x, pos.x) * step(pos.x, ABBoxMax.x);
    uint inABY = step(ABBoxMin.y, pos.y) * step(pos.y, ABBoxMax.y);
    uint inABZ = step(ABBoxMin.z, pos.z) * step(pos.z, ABBoxMax.z);
    uint inABBox = inABX * inABY * inABZ;

    pos = pos * inABBox;
    rawColor = rawColor * inABBox;

    // Color adjustment to correct color-space, and placement in a float3
    float3 color = (uint3(rawColor, rawColor >> 8, rawColor >> 16) & 0xffU) / 255.0;
    color = GammaToLinearSpace(color);

    // Output
    OutputBuffer[id] = pos;
    OutputBuffer[MaxPoints + id] = color;
}
